#summary Ideas for improvement for the future.

= Introduction =

Providing basic functionality was our first big milestone, but we have many ideas to improve the functionality of Wosaic.  This includes adding features, as well as optimizing the backend.  Below will represent an exhaustive we are considering-- some of them will be implemented, some won't.


== Parallelization ==

We are considering using threading to parallelize the querying and processing of images.  We have seen that querying Flickr for images is the bottleneck for processing, but there is also a hit for processing the images.  We'd like to use a producer-consumer scheme with one of them following models:

  * Send a batch of n small queries to Flickr all at once asynchronously.  As the results arrive, send them to the JAI processor for analyzing.  Once in analyzes a photo, set it to all regions in the mosaic for which it is the _best_ match, replacing any other current photos.

  * Once again, query Flickr for small sets of images to return results quickly.  As we retrieve results, send them to the JAI processor for analyzing.  After all photos have been analyzed, the JAI processor will have a library of scored Pixel objects.  Iterate over the mosaic, and select the best Pixel for each region.


== Database Use ==

As querying Flickr seems to be the greatest bottleneck, we think it might be beneficial to store results in our own database which we could query.  Basically, we could cache the results of any Flickr query, storing a unique photo ID, the search query it was found by, and the average color.  We could have a separate table that identifies how many "pages" of results we have for each search query, so we know how to query Flickr later.  An implementation like this would have the following pros and cons:

  * Pros
    * We would have the benefit that every photo found from a database query would already be processed.
    * If we host the database on the same subnet as the applet, the queries should be much faster.
    * The more images we process and the more mosaics we create, the better our database will get.
  * Cons
    * Our database will be very small to begin with, so we won't see many hits.  This will just cause more overhead because we will need to then query Flickr, and save all of our results in our database.
    * We are basically mirroring Flickr's database with information that is relevant to us.  It will be a problem if information in Flickr's database changes.  For example, if the URL for a picture changes, or the picture is removed entirely.
    * An image could be returned with many different search strings on Flickr.  It will be hard to represent all of these strings in our own database.

Assuming we use a database, our algorithm could go something like this:
  * Query our own internal database for images matching a search string.
  * If we don't find enough images, query Flickr for the same string.
  * For any images that we get from Flickr that aren't currently in the database, process them and add them to the database.  Repeat until we have enough images for the Mosaic.

== Adding Weights to Source Images ==

We want to take into account other factors when determining where to place a source image.  The list of factors and their weights are:

   * Average color: +x points
   * Photo was already used before: -y points

The idea behind this is that we want to stray away from using the same image many times in a small area.  Having many different images next to each other is part of what makes the mosaic interesting.