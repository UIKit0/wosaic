package wosaic;

import java.awt.Panel;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JButton;
import javax.swing.JFormattedTextField;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JTextField;

import wosaic.ui.MosaicPane;
import wosaic.utilities.Mosaic;
import wosaic.utilities.Status;

/**
 * The new interface for Wosaic. This revision will be an almost complete
 * rewrite to better abstract the creation process and keep track of where are
 * memory is being used.
 */
public class WosaicUI2 extends Panel implements ActionListener {

	/**
	 * Generated by Eclipse
	 */
	private static final long serialVersionUID = -3633641341230537673L;

	/**
	 * The second tab in our UI, responsible to letting the users set extra
	 * options for the Mosaic creation. This is created at runtime and persists
	 * throughout the session.
	 */
	protected JPanel AdvancedOptionsTab = null;

	/**
	 * A UI Element to enumerate all of the source plugins, whether they are
	 * enabled or not.
	 */
	protected JList AllSourcesList = null;

	/**
	 * Button that spawns the File Chooser allowing the user to select a source
	 * picture. This gets created with the MainTab at runtime.
	 */
	protected JButton BrowseButton = null;

	/**
	 * UI element allowing the user to stop generating a mosaic mid-process.
	 */
	protected JButton CancelButton = null;

	/**
	 * UI element allowing a user to configure the selected source plugin.
	 */
	protected JButton ConfigureSourceButton;

	/**
	 * This is the main panel that holds all child UI elements.
	 */
	protected JPanel ContentPane = null;

	/**
	 * Radio button allowing the user to opt to entering their own custom
	 * dimensions for the saved mosaic output. Although this is created and
	 * adjustable at runtime, it has no effect until saving the mosaic.
	 */
	protected JRadioButton CustomDimsButton = null;

	/**
	 * The text field allowing a user to specify their own custom X dimension
	 * for the saved mosaic output. Although this is created and adjustable at
	 * runtime, it has no effect until saving the mosaic.
	 */
	protected JFormattedTextField CustomDimsTextX = null;

	/**
	 * The text field allowing a user to specify their own custom Y dimension
	 * for the saved mosaic output. Although this is created and adjustable at
	 * runtime, it has no effect until saving the mosaic.
	 */
	protected JFormattedTextField CustomDimsTextY = null;

	/**
	 * UI element allowing a user to disable the selected source plugin.
	 */
	protected JButton DisableSourceButton;

	/**
	 * A UI Element to enumerate all of the source plugins that have been
	 * enabled.
	 */
	protected JList EnabledSourcesList = null;

	/**
	 * UI element allowing a user to enable the selected source plugin.
	 */
	protected JButton EnableSourceButton;

	/**
	 * The underlying Mosaic. The WosaicUI needs this to pass to the Controller
	 * for editing, and to the MosaicPanel to update the grid. The Mosaic object
	 * is initialized when it's time to generate a new Mosaic, rather than at
	 * runtime. It gets replaced everytime we create a new mosaic.
	 */
	protected Mosaic GeneratedMosaic = null;

	/**
	 * The button that starts the actual process of creating the mosaic. Once
	 * the button is pressed, we validate inputs and get the ball rolling.
	 */
	protected JButton GenerateMosaicButton = null;

	/**
	 * The UI element that allows a user to enter an image to use as the mosaic
	 * source. This is generally populated by a file chooser, but the user may
	 * also enter a path manually.
	 */
	protected JTextField InputImageText = null;

	/**
	 * The primary "tab" in our interface. Holds the general configuration
	 * options, and will display the Mosaic when it's created. This is created
	 * at runtime and persists throughout the session.
	 */
	protected JPanel MainTab = null;

	/**
	 * The "Controller" that is responsible for delegating tasks and spawning
	 * threads for the creation of a mosaic. This gets initialized at
	 * "generation time", and is destroyed promptly after the mosaic is
	 * complete. This should help us keep hold of our memory.
	 */
	protected Controller MosaicController = null;

	/**
	 * The lower pane, where we actually display the generated mosaic. We use
	 * the same MosaicPane for the duration of the session, but the tile grid
	 * gets reinitialized each mosaic.
	 */
	protected MosaicPane MosaicDisplay = null;

	/**
	 * A text field where the user can enter an integer to specify the
	 * resolution for the mosaic tiles
	 */
	protected JFormattedTextField MosaicResolutionText = null;

	/**
	 * Radio button allowing the user to opt to entering a multiplier of the
	 * original dimensions to save the mosaic to. Although this is created and
	 * adjustable at runtime, it has no effect until saving the mosaic.
	 */
	protected JRadioButton MultiplierDimsButton = null;

	/**
	 * The text field were a user can specify a multiplier of the original
	 * dimensions to save the mosaic to. Although this is created and adjustable
	 * at runtime, it has no effect until saving the mosaic.
	 */
	protected JFormattedTextField MultiplierDimsText = null;

	/**
	 * Radio button for the user to specify that the image should be saved with
	 * the original dimensions of the source image. Although this is created and
	 * adjustable at runtime, it has no effect until saving the mosaic.
	 */
	protected JRadioButton OriginalDimsButton = null;

	/**
	 * An object to represent the source plugins available, as well as the ones
	 * selected. We create the plugin objects as they are enabled.
	 */
	protected Sources PluginSources = null;

	/**
	 * Button that begins the process of saving the completed mosaic. Only
	 * enabled when there has been a mosaic actually created. This gets created
	 * with the MainTab at runtime.
	 */
	protected JButton SaveButton = null;

	/**
	 * The text field where a user can enter the search string to query for
	 * tiles on.
	 */
	protected JTextField SearchQueryText = null;

	/**
	 * A UI element to show progress and report status messages to the user as
	 * neccessary
	 */
	protected Status StatusUI = null;

	/**
	 * Default constructor, called at program runtime. Layout the UI, and
	 * initialize the minimum amount of member variables needed.
	 */
	protected WosaicUI2() {
		super();
		InitializeUI();

		// TODO: Write code for comments below
		// Initialize other member variables
		// Populate UI with default values
		System.gc();
	}

	/**
	 * Handle events from various sources by passing evaluation off to the
	 * appropriate method.
	 * 
	 * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
	 */
	public void actionPerformed(final ActionEvent e) {
		final Object eventSource = e.getSource();

		if (eventSource == BrowseButton)
			LaunchInputBrowseDialog();

		else if (eventSource == GenerateMosaicButton)
			StartMosaicGeneration();

		else if (eventSource == CancelButton)
			CancelGeneration();

		else if (eventSource == SaveButton)
			SaveMosaic();

		else if (eventSource == OriginalDimsButton
				|| eventSource == MultiplierDimsButton
				|| eventSource == CustomDimsButton)
			EnableSelectedDimField((JRadioButton) eventSource);

		else if (eventSource == EnableSourceButton)
			EnableSelectedSource();

		else if (eventSource == DisableSourceButton)
			DisableSelectedSource();

		else if (eventSource == ConfigureSourceButton)
			ConfigureSelectedSource();

		else if (eventSource == MosaicController)
			GenerationCleanup();

	}

	/**
	 * Send the appropriate interrupts to cancel the mosaic currently being
	 * generated, and then update the UI.
	 */
	protected void CancelGeneration() {
		// TODO: Write code for the comments below
		// Prompt the user to make sure the process should be
		// cancelled.
		// Send interrupts to the controller

		GenerationCleanup();
	}

	/**
	 * Configure the currently selected source plugin by simply calling the
	 * plugin code to launch it's defined configuration panel.
	 */
	private void ConfigureSelectedSource() {
		// TODO: Implement the code described above

	}

	/**
	 * Disable the currently selected source plugin by removing it from our
	 * Sources list, and then updating our UI accordingly
	 */
	protected void DisableSelectedSource() {
		// TODO: Implement the code described above
	}

	/**
	 * Update the UI elements for choosing mosaic output dimensions based on the
	 * radio button that the user has selected. Make the fields for the selected
	 * button active, and the others inactive.
	 * 
	 * @param selectedButton
	 *            The user-selected radio button
	 */
	private void EnableSelectedDimField(final JRadioButton selectedButton) {
		// TODO: Implement code before
		// for each text field pertaining to the dimension choices:
		// field.enabled = (selectedButton == fieldButton)
	}

	/**
	 * Enable the currently selected source plugin by creating the appropriate
	 * object in our Sources list, as well as updating the UI accordingly
	 */
	protected void EnableSelectedSource() {
		// TODO: Implement the code described above
	}

	/**
	 * Do any cleanup neccessary after we are finished generating a mosaic. This
	 * includes getting rid of our Controller object, and updating our UI.
	 */
	private void GenerationCleanup() {
		MosaicController = null;
		// TODO: Write code to update the UI (enable buttons
		// that we disabled in the StartMosaicGeneration method)
	}

	/**
	 * Wrapper method to initialize and layout all UI elements in the Wosaic
	 * interface
	 */
	protected void InitializeUI() {
		// TODO: Write code to initialize UI elements
	}

	/**
	 * Spawn a FileChooser that will allow the user to specify an input file,
	 * and populate the InputImageText field when the user accepts
	 */
	protected void LaunchInputBrowseDialog() {
		// TODO: Write method code
	}

	/**
	 * Start the process of saving a mosaic. This should only be called once a
	 * Mosaic has actually be created. Prompt the user to enter a path to save
	 * to, (validate), and stitch the mosaic together for saving.
	 */
	protected void SaveMosaic() {
		// TODO: Implement comments below
		// Prompt for the file to save to
		// If file exists, make sure we want to overwrite
		// Call appropriate methods for stitching the mosaic
		// together, and save it.
		System.gc();
	}

	/**
	 * Start the actual process of generating the mosaic. This includes first
	 * verifying the inputs, setting up the UI, and finally creating and running
	 * the controller object.
	 */
	protected void StartMosaicGeneration() {
		// TODO: Write code for the comments below
		// Validate inputs
		// Update UI elements:
		// -- Set the grid of our MosaicPane
		// -- Disable most buttons and inputs during generation
		// -- Set status and start progress if needed
		System.gc();
		// Create our Controller object, and finally run it
	}

}
