package wosaic;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.util.ArrayList;
import java.awt.GridBagLayout;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.io.File;

import javax.imageio.ImageIO;
import javax.swing.AbstractAction;
import javax.swing.BorderFactory;
import javax.swing.ButtonGroup;
import javax.swing.ButtonModel;
import javax.swing.ImageIcon;
import javax.swing.JApplet;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JTabbedPane;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import javax.swing.border.BevelBorder;

import wosaic.utilities.Mosaic;
import wosaic.utilities.Pixel;
import wosaic.utilities.MosaicListener;
import wosaic.utilities.MosaicEvent;
import javax.swing.JScrollPane;
import java.awt.GridLayout;
import java.awt.Rectangle;

/**
 * The User interface for Wosaic, and application to create a photo-mosaic
 * using pictures drawn from Flickr.
 * @author scott
 */
public class WosaicUI extends JApplet {

	/* A 2-d array of JLabels that we will add to our
	 * UI and update pixels during processing.
	 */
	private JLabel[][] PixelLabels = null;
	
	
	/**
	 * Action queried to create the Mosaic
	 * @author scott
	 */
	public class GenerateMosaicAction extends AbstractAction {

		/**
		 * Generated by Eclipse
		 */
		private static final long serialVersionUID = -4914549621520228000L;

		Controller cont = null;

		Component parent = null;

		GenerateMosaicAction(final Component parent) {
			super();
			this.parent = parent;
		}

		/**
		 * Call the appropriate members to generate a Mosaic.
		 * 
		 * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
		 */
		public void actionPerformed(final ActionEvent evt) {
			
			// Validate inputs
			JOptionPane jOptionsPane = new JOptionPane("Error", JOptionPane.ERROR_MESSAGE);
			BufferedImage bi = null;
			int resolution;
			double multiplier;
			
			// Check the filename
			try {
				System.out.println("Opening our source image to grab metadata...");
				File file = new File(FileField.getText());
			 	bi = ImageIO.read(file);
			} catch (Exception e) {
				jOptionsPane.showMessageDialog(this.parent, "Please enter a valid source image.");
				return;
			}
			
			// Check the search query
			if (SearchField.getText().length() == 0) {
				jOptionsPane.showMessageDialog(this.parent, "Please enter a search term.");
				return;
			}
			
			// Check that the resolution is a number
			try {
				resolution = Integer.parseInt(ResolutionField.getText());
			} catch (Exception e) {
				jOptionsPane.showMessageDialog(this.parent, "Please enter a number for the resolution.");
				return;
			}
			
			// Initialize a controller object and run it.
			final WosaicUI wos = (WosaicUI) parent;
			final int numThrds = WosaicUI.THREADS;
			int target = WosaicUI.TARGET;

			try {
				// FIXME: Infer xDim and yDim from the image size.
				int xDim = 0;
				int yDim = 0;
				
				// Check the dimensions of advanced options
				if (DimensionsMultiple.isSelected()) {
					try {
						multiplier = Double.parseDouble(DimensionsMultipleField.getText());
						xDim = (int) (bi.getWidth() * multiplier);
						yDim = (int) (bi.getHeight() * multiplier);
					} catch (Exception e) {
						jOptionsPane.showMessageDialog(this.parent, "Please enter a valid number for the multiplier.");
						return;
					}

				} else if(DimensionsOriginal.isSelected()) {
					xDim = bi.getWidth();
					yDim = bi.getHeight();
					
				} else if (DimensionsCustom.isSelected()) {
					try {
						xDim = Integer.parseInt(DimensionsCustomFieldX.getText());
						yDim = Integer.parseInt(DimensionsCustomFieldY.getText());
					} catch (Exception e) {
						jOptionsPane.showMessageDialog(this.parent, "Please enter a valid number for the dimensions.");
						return;
					}
				}

				try {
					target = Integer.parseInt(NumSearchField.getText());
				} catch (Exception e) {
					int retVal = jOptionsPane.showConfirmDialog(this.parent, 
							"Unable to parse results field, continue using default number of results: " + 
							WosaicUI.TARGET + "?", "Proceed?", JOptionPane.YES_NO_OPTION);
					
					if (retVal == JOptionPane.NO_OPTION) {
						return;
					}
					
				}
				
				// FIXME: Infer numRows and numCols from resolution and dims
				int numRows;
				int numCols;
				if (xDim <= yDim) {
					numRows = resolution;
					numCols = (int) ((double) xDim / yDim * numRows);
				} else {
					numCols = resolution;
					numRows = (int) ((double) yDim / xDim * numCols);
				}

				final String search = wos.SearchField.getText();
				final String mImage = wos.FileField.getText();

				Mosaic mosaic = new Mosaic();
				SaveAction.addMosaic(mosaic);
				
				// Create a listener class
				class MosaicListen implements MosaicListener {
					
					Mosaic mos;
					
					MosaicListen(Mosaic m) {
						mos = m;
					}
					
					/**
					 * Updates the UI when we get word that the mosaic has changed.
					 */
					public void mosaicUpdated(MosaicEvent e) {
						ArrayList<Point> coords = e.Coords;
						for (int i = 0; i < coords.size(); i++) {
							int row = coords.get(i).x;
							int col = coords.get(i).y;
							JLabel theLabel = PixelLabels[row][col];
							theLabel.setIcon(mos.getPixelAt(row, col).getImageIcon());
							theLabel.repaint(theLabel.getBounds());
						}
					}
					
				}
				
				MosaicListen listener = new MosaicListen(mosaic);
				mosaic.addMosaicEventListener(listener);
				
				// Clear the previous labels, and add our news ones to the
				// output pane.
				ContentPanel.removeAll();
				GridLayout layout = new GridLayout(numRows, numCols);
				ContentPanel.setLayout(layout);
				ContentPanel.setPreferredSize(new Dimension(xDim, yDim));
				PixelLabels = new JLabel[numRows][numCols];
				
				for (int row = 0; row < numRows; row++)
					for (int col = 0; col < numCols; col++) {
						PixelLabels[row][col] = new JLabel();
						ContentPanel.add(PixelLabels[row][col]);
					}
				ContentPanel.validate();
				
				System.out.println("Initialize our controller.");
				cont = new Controller(target, numThrds, numRows, numCols, xDim,
						yDim, search, mImage, mosaic);
				System.out.println("Call our controller thread");
				final Thread t = new Thread(cont);
				t.run();
				
				//System.out.println("Waited for our JAI thread");
				//cont.mosaicThread.join();

				//final BufferedImage mos = cont.mProc.createImage();
				//wos.ImageBox.setIcon(new ImageIcon(mos));
				//jContentPane.add(ImageBox, BorderLayout.CENTER);
				//repaint();
				/*
				 * int target, int numThrds, int numRows, int numCols, int xDim,
				 * int yDim, String search, String mImage
				 */
				
				SaveButton.setEnabled(true);
				
			} catch (final Exception ex) {
				System.out.println(ex.getMessage());
			}
		}
	}
	
	

	/**
	 * Creates and shows a modal open-file dialog.
	 * 
	 * @author scott
	 * 
	 */
	public class OpenFileAction extends AbstractAction {
		/**
		 * Generated by Eclipse
		 */
		private static final long serialVersionUID = -3576454135128663771L;

		JFileChooser chooser;

		/**
		 * The image file chosen to be the source of the Wosaic
		 */
		public File file = null;

		Component parent;

		OpenFileAction(final Component parent, final JFileChooser chooser) {
			super("Open...");
			this.chooser = chooser;
			this.parent = parent;
		}

		/**
		 * Retrieve the file to open
		 * 
		 * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
		 */
		public void actionPerformed(final ActionEvent evt) {
			
			// Show dialog; this method does not return until dialog is closed
			chooser.showOpenDialog(parent);
			// Get the selected file and put it into our text field.
			file = chooser.getSelectedFile();
			((WosaicUI) parent).FileField.setText(file.getAbsolutePath());
		}
	}

	/**
	 * Creates and shows a modal open-file dialog.
	 * 
	 * @author carl
	 * 
	 */
	public class SaveFileAction extends AbstractAction {

		JFileChooser chooser;
		private Mosaic mos;

		/**
		 * The image file chosen to be the source of the Wosaic
		 */
		public File file = null;

		Component parent;

		SaveFileAction(final Component parent, final JFileChooser chooser) {
			super("Save...");
			this.chooser = chooser;
			this.parent = parent;
		}
		
		/**
		 * Associate a mosaic with this save action.
		 * @param m
		 */
		public void addMosaic(Mosaic m) {
			this.mos = m;
		}

		/**
		 * Retrieve the file to open
		 * 
		 * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
		 */
		public void actionPerformed(final ActionEvent evt) {
			// Show dialog; this method does not return until dialog is closed
			chooser.showSaveDialog(parent);
			
			// Get the selected file and save it
			file = chooser.getSelectedFile();
			
			BufferedImage img = mos.createImage();
			try {
				mos.save(img, file.getAbsolutePath(), "JPEG");
			} catch (Exception e) {
				System.out.println("Save failed: ");
				System.out.println(e);
			}
			
		}
	}
	
	/**
	 * Action event listener for the Dimensions radio buttons.
	 * @author carl-eriksvensson
	 *
	 */
	public class RadioButtonPress extends AbstractAction {

		public void actionPerformed(ActionEvent e) {
			if (DimensionsMultiple.isSelected()) {
				DimensionsCustomFieldX.setEnabled(false);
				DimensionsCustomFieldY.setEnabled(false);
				DimensionsMultipleField.setEnabled(true);
			} else if (DimensionsCustom.isSelected()) {
				DimensionsMultipleField.setEnabled(false);
				DimensionsCustomFieldX.setEnabled(true);
				DimensionsCustomFieldY.setEnabled(true);
			} else {
				DimensionsMultipleField.setEnabled(false);
				DimensionsCustomFieldX.setEnabled(false);
				DimensionsCustomFieldY.setEnabled(false);
			}
		}
		
	}
	
	/**
	 * Generated by Eclipse
	 */
	private static final long serialVersionUID = -7379941758951948236L;;

	static final int TARGET = 500;

	static final int THREADS = 10;

	private JButton BrowseButton = null;

	/**
	 * A reference to a controller-- what actually calls the Flickr service and
	 * JAI processor to do all the work.
	 */
	public Controller controller;

	// Tabbed view manager
	JTabbedPane tabbedPane = null;
	
	// File I/O components
	JFileChooser FileChooser = null;
	JFileChooser SaveChooser = null;

	// UI Components
	private JTextField FileField = null;
	private JLabel FileLabel = null;
	GenerateMosaicAction GenerateAction = null;
	private JButton GenerateButton = null;
	private JButton SaveButton = null;
	//private JLabel ImageBox = null;
	private JPanel jContentPane = null;
	OpenFileAction OpenAction = null;
	SaveFileAction SaveAction = null;
	private JPanel OptionsPanel = null;
	private JTextField ResolutionField = null;
	private JLabel ResolutionLabel = null;
	private JTextField SearchField = null;
	private JLabel SearchLabel = null;
	private JScrollPane ContentScrollPane = null;
	
	// Advanced Options
	private JPanel DimensionsPanel = null;
	private JRadioButton DimensionsOriginal = null;
	private JRadioButton DimensionsMultiple = null;
	private JRadioButton DimensionsCustom = null;
	private ButtonGroup DimensionsGroup = null;
	private JTextField DimensionsMultipleField = null;
	private JTextField DimensionsCustomFieldX = null;
	private JTextField DimensionsCustomFieldY = null;
	
	private JPanel NumSearchPanel = null;
	private JTextField NumSearchField = null;
	// Main content panel
	private JPanel ContentPanel = null;
	
	// Advanced Options panel
	private JPanel AdvancedOptions = null;

	
	/**
	 * This is the default constructor
	 */
	public WosaicUI() {
		super();
		FileChooser = new JFileChooser();
		SaveChooser = new JFileChooser();
		OpenAction = new OpenFileAction(this, FileChooser);
		SaveAction = new SaveFileAction(this, SaveChooser);
		GenerateAction = new GenerateMosaicAction(this);
		tabbedPane = new JTabbedPane();
	}

	/**
	 * This method initializes BrowseButton
	 * 
	 * @return javax.swing.JButton
	 */
	private JButton getBrowseButton() {
		if (BrowseButton == null) {
			BrowseButton = new JButton(OpenAction);
			BrowseButton.setText("Browse..");
		}
		return BrowseButton;
	}

	/**
	 * This method initializes FileField
	 * 
	 * @return javax.swing.JTextField
	 */
	private JTextField getFileField() {
		if (FileField == null) {
			FileField = new JTextField(20);
			FileField.setColumns(20);
			FileField.setText("");
		}
		return FileField;
	}

	/**
	 * This method initializes GenerateButton
	 * 
	 * @return javax.swing.JButton
	 */
	private JButton getGenerateButton() {
		if (GenerateButton == null) {
			GenerateButton = new JButton(GenerateAction);
			GenerateButton.setText("Generate Mosaic");
			GenerateButton.setMnemonic(KeyEvent.VK_ENTER);
		}
		return GenerateButton;
	}


	/**
	 * This method initializes jContentPane
	 * 
	 * @return javax.swing.JPanel
	 */
	private JPanel getJContentPane() {
		if (jContentPane == null) {
			jContentPane = new JPanel();
			jContentPane.setLayout(new BorderLayout());
			jContentPane.add(getOptionsPanel(), BorderLayout.NORTH);
			jContentPane.add(getContentScrollPane(), BorderLayout.CENTER);
		}
		return jContentPane;
	}

	private JPanel getAdvancedOptionsPanel() {

		if (AdvancedOptions == null) {
			AdvancedOptions = new JPanel();
			AdvancedOptions.setLayout(new GridBagLayout());
			//AdvancedOptions.setLayout(new GridLayout(0,2));
			AdvancedOptions.setPreferredSize(new Dimension(600, 60));
			
			// Dimensions Panel
			DimensionsPanel = new JPanel();
			DimensionsPanel.setLayout(new GridBagLayout());
			//DimensionsPanel.setPreferredSize(new Dimension(400, 100));
			GridBagConstraints dimensionsPanelConstraints = new GridBagConstraints();
			dimensionsPanelConstraints.gridx = 0;
			dimensionsPanelConstraints.gridy = 0;
			dimensionsPanelConstraints.anchor = GridBagConstraints.WEST;
			
			// Mosaic Dimensions Label
			GridBagConstraints dimensionsLabelConstraints = new GridBagConstraints();
			dimensionsLabelConstraints.gridx = 0;
			dimensionsLabelConstraints.gridy = 0;
			dimensionsLabelConstraints.anchor = GridBagConstraints.WEST;
			dimensionsLabelConstraints.gridwidth = 2;
			dimensionsLabelConstraints.gridheight = 1;
			JLabel mosaicDimensionsLabel = new JLabel();
			mosaicDimensionsLabel.setText("Mosiac Dimensions");
			DimensionsPanel.add(mosaicDimensionsLabel, dimensionsLabelConstraints);
			
			GridBagConstraints spacerConstraints = new GridBagConstraints();
			spacerConstraints.gridx = 0;
			spacerConstraints.gridy = 1;
			spacerConstraints.anchor = GridBagConstraints.WEST;
			JLabel spacerLabel = new JLabel();
			spacerLabel.setText("      ");
			DimensionsPanel.add(spacerLabel, spacerConstraints);
			
			// Mosaic Dimensions Radio Buttons - Original
			RadioButtonPress listener = new RadioButtonPress();
			DimensionsOriginal = new JRadioButton("Original Image's Dimensions");
			DimensionsOriginal.setSelected(true);
			DimensionsOriginal.addActionListener(listener);
			GridBagConstraints dimensionsOriginalConstraints = new GridBagConstraints();
			dimensionsOriginalConstraints.gridx = 1;
			dimensionsOriginalConstraints.gridy = 1;
			dimensionsOriginalConstraints.anchor = GridBagConstraints.WEST;
			DimensionsPanel.add(DimensionsOriginal, dimensionsOriginalConstraints);
			
			// Mosaic Dimensions Radio Buttons - Multiple
			DimensionsMultiple = new JRadioButton("Multiple of Image's Dimensions");
			DimensionsMultiple.addActionListener(listener);
			GridBagConstraints dimensionsMultipleConstraints = new GridBagConstraints();
			dimensionsMultipleConstraints.gridx = 1;
			dimensionsMultipleConstraints.gridy = 2;
			dimensionsMultipleConstraints.anchor = GridBagConstraints.WEST;
			DimensionsPanel.add(DimensionsMultiple, dimensionsMultipleConstraints);
			
			DimensionsMultipleField = new JTextField(8);
			DimensionsMultipleField.setColumns(8);
			DimensionsMultipleField.setText("1.0");
			DimensionsMultipleField.setEnabled(false);
			//DimensionsMultipleField.setPreferredSize(new Dimension(5, 30));
			GridBagConstraints dimensionsMultipleFieldConstraints = new GridBagConstraints();
			dimensionsMultipleFieldConstraints.gridx = 1;
			dimensionsMultipleFieldConstraints.gridy = 3;
			dimensionsMultipleFieldConstraints.anchor = GridBagConstraints.WEST;
			dimensionsMultipleFieldConstraints.ipadx = 7;
			DimensionsPanel.add(DimensionsMultipleField, dimensionsMultipleFieldConstraints);
			
			// Mosaic Dimensions Radio Buttons - Custom
			DimensionsCustom = new JRadioButton("Custom Dimensions");
			DimensionsCustom.addActionListener(listener);
			GridBagConstraints dimensionsCustomConstraints = new GridBagConstraints();
			dimensionsCustomConstraints.gridx = 1;
			dimensionsCustomConstraints.gridy = 4;
			dimensionsCustomConstraints.anchor = GridBagConstraints.WEST;
			DimensionsPanel.add(DimensionsCustom, dimensionsCustomConstraints);
			
			DimensionsCustomFieldX = new JTextField(8);
			DimensionsCustomFieldX.setColumns(8);
			DimensionsCustomFieldX.setText("X-Dimm");
			DimensionsCustomFieldX.setEnabled(false);
			//DimensionsMultipleField.setPreferredSize(new Dimension(5, 30));
			GridBagConstraints dimensionsMultipleCustomXConstraints = new GridBagConstraints();
			dimensionsMultipleCustomXConstraints.gridx = 1;
			dimensionsMultipleCustomXConstraints.gridy = 5;
			dimensionsMultipleCustomXConstraints.anchor = GridBagConstraints.WEST;
			//dimensionsMultipleCustomXConstraints.ipadx = 0;
			dimensionsMultipleCustomXConstraints.fill = GridBagConstraints.NONE;
			DimensionsPanel.add(DimensionsCustomFieldX, dimensionsMultipleCustomXConstraints);
			
			DimensionsCustomFieldY = new JTextField(8);
			DimensionsCustomFieldY.setColumns(8);
			DimensionsCustomFieldY.setText("Y-Dimm");
			DimensionsCustomFieldY.setEnabled(false);
			//DimensionsMultipleField.setPreferredSize(new Dimension(5, 30));
			GridBagConstraints dimensionsMultipleCustomYConstraints = new GridBagConstraints();
			dimensionsMultipleCustomYConstraints.gridx = 2;
			dimensionsMultipleCustomYConstraints.gridy = 5;
			dimensionsMultipleCustomYConstraints.anchor = GridBagConstraints.WEST;
			dimensionsMultipleCustomYConstraints.fill = GridBagConstraints.NONE;
			//dimensionsMultipleCustomYConstraints.ipadx = 0;
			DimensionsPanel.add(DimensionsCustomFieldY, dimensionsMultipleCustomYConstraints);
			
			// Mosaic Dimensions Radio Buttons - Group
			DimensionsGroup = new ButtonGroup();
			DimensionsGroup.add(DimensionsOriginal);
			DimensionsGroup.add(DimensionsMultiple);
			DimensionsGroup.add(DimensionsCustom);
			
			AdvancedOptions.add(DimensionsPanel, dimensionsPanelConstraints);
			//AdvancedOptions.add(DimensionsPanel);
			
			// Number of Search Results
			NumSearchPanel = new JPanel();
			NumSearchPanel.setLayout(new GridBagLayout());
			//NumSearchPanel.setPreferredSize(new Dimension(400, 100));
			GridBagConstraints numSearchPanelConstraints = new GridBagConstraints();
			numSearchPanelConstraints.gridx = 0;
			numSearchPanelConstraints.gridy = 1;
			numSearchPanelConstraints.anchor = GridBagConstraints.WEST;
			numSearchPanelConstraints.ipady = 20;
			
			// Label
			GridBagConstraints numSearchLabelConstraints = new GridBagConstraints();
			numSearchLabelConstraints.gridx = 0;
			numSearchLabelConstraints.gridy = 0;
			numSearchLabelConstraints.anchor = GridBagConstraints.WEST;
			numSearchLabelConstraints.gridwidth = 2;
			JLabel numSearchLabel = new JLabel();
			numSearchLabel.setText("Number of Search Results to Use");
			NumSearchPanel.add(numSearchLabel, numSearchLabelConstraints);
			
			GridBagConstraints spacerConstraints2 = new GridBagConstraints();
			spacerConstraints2.gridx = 0;
			spacerConstraints2.gridy = 1;
			spacerConstraints2.anchor = GridBagConstraints.WEST;
			JLabel spacerLabel2 = new JLabel();
			spacerLabel2.setText("      ");
			NumSearchPanel.add(spacerLabel2, spacerConstraints2);
			
			// Search Results Field
			NumSearchField = new JTextField(8);
			NumSearchField.setText(((Integer) WosaicUI.TARGET).toString());
			GridBagConstraints numSearchFieldConstraints = new GridBagConstraints();
			numSearchFieldConstraints.gridx = 1;
			numSearchFieldConstraints.gridy = 1;
			numSearchFieldConstraints.anchor = GridBagConstraints.WEST;
			numSearchFieldConstraints.ipadx = 7;
			NumSearchPanel.add(NumSearchField, numSearchFieldConstraints);
			
			AdvancedOptions.add(NumSearchPanel, numSearchPanelConstraints);
			//AdvancedOptions.add(NumSearchPanel);
		}
		
		return AdvancedOptions;
	}
	
	/**
	 * This method initializes OptionsPanel
	 * 
	 * @return javax.swing.JPanel
	 */
	private JPanel getOptionsPanel() {
		if (OptionsPanel == null) {
			
			// Options Panel
			OptionsPanel = new JPanel();
			OptionsPanel.setLayout(new GridBagLayout());
			OptionsPanel.setPreferredSize(new Dimension(600, 60));
			OptionsPanel.setBorder(BorderFactory.createCompoundBorder(
					BorderFactory.createBevelBorder(BevelBorder.RAISED),
					BorderFactory.createEmptyBorder(5, 5, 5, 5)));
			
			// Save Button
			GridBagConstraints saveButtonConstraints = new GridBagConstraints();
			saveButtonConstraints.gridx = 5;
			saveButtonConstraints.gridy = 0;
			OptionsPanel.add(getSaveButton(), saveButtonConstraints);
			
			// Generate Button
			final GridBagConstraints generateButtonConstraints = new GridBagConstraints();
			generateButtonConstraints.gridx = 4;
			generateButtonConstraints.gridheight = 1;
			generateButtonConstraints.gridy = 1;
			OptionsPanel.add(getGenerateButton(), generateButtonConstraints);
			
			// Resolution Field
			final GridBagConstraints resolutionFieldConstraints = new GridBagConstraints();
			resolutionFieldConstraints.fill = GridBagConstraints.HORIZONTAL;
			resolutionFieldConstraints.gridy = 1;
			resolutionFieldConstraints.weightx = 1.0;
			resolutionFieldConstraints.anchor = GridBagConstraints.WEST;
			resolutionFieldConstraints.gridx = 3;
			OptionsPanel.add(getResolutionField(), resolutionFieldConstraints);
			
			// Resolution Label
			final GridBagConstraints resolutionLabelConstraints = new GridBagConstraints();
			resolutionLabelConstraints.gridx = 2;
			resolutionLabelConstraints.gridy = 1;
			ResolutionLabel = new JLabel();
			ResolutionLabel.setText("Resolution:");
			OptionsPanel.add(ResolutionLabel, resolutionLabelConstraints);
			
			// Search Field
			final GridBagConstraints searchFieldConstraints = new GridBagConstraints();
			searchFieldConstraints.fill = GridBagConstraints.HORIZONTAL;
			searchFieldConstraints.gridy = 1;
			searchFieldConstraints.weightx = 1.0;
			searchFieldConstraints.anchor = GridBagConstraints.WEST;
			searchFieldConstraints.gridx = 1;
			OptionsPanel.add(getSearchField(), searchFieldConstraints);
			
			// Search Label
			final GridBagConstraints searchLabelConstraints = new GridBagConstraints();
			searchLabelConstraints.gridx = 0;
			searchLabelConstraints.anchor = GridBagConstraints.EAST;
			searchLabelConstraints.gridy = 1;
			SearchLabel = new JLabel();
			SearchLabel.setText("Search String:");
			OptionsPanel.add(SearchLabel, searchLabelConstraints);
			
			// Browse Button
			final GridBagConstraints browseButtonConstraints = new GridBagConstraints();
			browseButtonConstraints.gridx = 4;
			browseButtonConstraints.anchor = GridBagConstraints.WEST;
			browseButtonConstraints.gridy = 0;
			OptionsPanel.add(getBrowseButton(), browseButtonConstraints);
			
			// File Field
			final GridBagConstraints fileFieldConstraints = new GridBagConstraints();
			fileFieldConstraints.fill = GridBagConstraints.HORIZONTAL;
			fileFieldConstraints.gridy = 0;
			fileFieldConstraints.gridwidth = 3;
			fileFieldConstraints.anchor = GridBagConstraints.WEST;
			fileFieldConstraints.gridx = 1;
			OptionsPanel.add(getFileField(), fileFieldConstraints);
			
			// File Label
			final GridBagConstraints fileLabelConstraints = new GridBagConstraints();
			fileLabelConstraints.gridx = 0;
			fileLabelConstraints.anchor = GridBagConstraints.EAST;
			fileLabelConstraints.gridy = 0;
			FileLabel = new JLabel();
			FileLabel.setText("Source Image:");
			OptionsPanel.add(FileLabel, fileLabelConstraints);

		}
		
		return OptionsPanel;
	}

	/**
	 * This method initializes ResolutionField
	 * 
	 * @return javax.swing.JTextField
	 */
	private JTextField getResolutionField() {
		if (ResolutionField == null) {
			ResolutionField = new JTextField(5);
			ResolutionField.setColumns(5);
			ResolutionField.setText("25");
		}
		return ResolutionField;
	}

	/**
	 * This method initializes SearchField
	 * 
	 * @return javax.swing.JTextField
	 */
	private JTextField getSearchField() {
		if (SearchField == null) {
			SearchField = new JTextField(10);
			SearchField.setColumns(10);
		}
		return SearchField;
	}

	/**
	 * This method initializes this
	 * 
	 * 
	 */
	@Override
	public void init() {
		this.setBounds(new Rectangle(0, 0, 600, 400));
		tabbedPane.addTab("Mosaic", getJContentPane());
		tabbedPane.addTab("AdvancedOptions", getAdvancedOptionsPanel());
		setContentPane(tabbedPane);
	}

	/**
	 * This method initializes ContentScrollPane	
	 * 	
	 * @return javax.swing.JScrollPane	
	 */
	private JScrollPane getContentScrollPane() {
		if (ContentScrollPane == null) {
			//ImageBox = new JLabel();
			//ImageBox.setText("");
			//ImageBox.setHorizontalTextPosition(SwingConstants.CENTER);
			//ImageBox.setHorizontalAlignment(SwingConstants.CENTER);
			ContentScrollPane = new JScrollPane();
			//ContentScrollPane.setViewportView(ImageBox);
			ContentScrollPane.setBorder(null);
			ContentScrollPane.setViewportView(getContentPanel());
		}
		return ContentScrollPane;
	}

	/**
	 * This method initializes ContentPanel	
	 * 	
	 * @return javax.swing.JPanel	
	 */
	private JPanel getContentPanel() {
		if (ContentPanel == null) {
			GridLayout gridLayout = new GridLayout();
			gridLayout.setRows(1);
			ContentPanel = new JPanel();
			ContentPanel.setLayout(gridLayout);
		}
		return ContentPanel;
	}

	/**
	 * This method initializes SaveButton	
	 * 	
	 * @return javax.swing.JButton	
	 */
	private JButton getSaveButton() {
		if (SaveButton == null) {
			SaveButton = new JButton(SaveAction);
			SaveButton.setText("Save");
			SaveButton.setEnabled(false);
		}
		return SaveButton;
	}

}
