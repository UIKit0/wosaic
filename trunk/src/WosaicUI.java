import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.io.File;

import javax.imageio.ImageIO;
import javax.swing.AbstractAction;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JApplet;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import javax.swing.border.BevelBorder;

/**
 * The User interface for Wosaic, and application to create a photo-mosaic
 * using pictures drawn from Flickr.
 * @author scott
 */
public class WosaicUI extends JApplet {

	/**
	 * Action queried to create the Mosaic
	 * @author scott
	 */
	public class GenerateMosaicAction extends AbstractAction {

		/**
		 * Generated by Eclipse
		 */
		private static final long serialVersionUID = -4914549621520228000L;

		Controller cont = null;

		Component parent = null;

		GenerateMosaicAction(final Component parent) {
			super();
			this.parent = parent;
		}

		/**
		 * Call the appropriate members to generate a Mosaic.
		 * 
		 * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
		 */
		public void actionPerformed(final ActionEvent evt) {
			// Initialize a controller object and run it.
			final WosaicUI wos = (WosaicUI) parent;
			final int target = WosaicUI.TARGET;
			final int numThrds = WosaicUI.THREADS;

			try {
				// FIXME: Infer xDim and yDim from the image size.
				System.out
						.println("Opening our source image to grab metadata...");
				final BufferedImage bi = ImageIO.read(OpenAction.file);
				final int xDim = bi.getWidth();
				final int yDim = bi.getHeight();

				// FIXME: Infer numRows and numCols from resolution and dims
				int numRows, numCols;
				if (xDim <= yDim) {
					numRows = Integer.parseInt(wos.ResolutionField.getText());
					numCols = (int) ((double) xDim / yDim * numRows);
				} else {
					numCols = Integer.parseInt(wos.ResolutionField.getText());
					numRows = (int) ((double) yDim / xDim * numCols);
				}

				final String search = wos.SearchField.getText();
				final String mImage = wos.FileField.getText();

				System.out.println("Initialize our controller.");
				cont = new Controller(target, numThrds, numRows, numCols, xDim,
						yDim, search, mImage);
				System.out.println("Call our controller thread");
				final Thread t = new Thread(cont);
				t.run();
				System.out.println("Wait for our JAI thread");
				cont.mosaicThread.join();

				final BufferedImage mos = cont.mProc.createImage(cont.mProc.wosaic,
						cont.mProc.params, cont.mProc.master.source);
				wos.ImageBox.setIcon(new ImageIcon(mos));
				/*
				 * int target, int numThrds, int numRows, int numCols, int xDim,
				 * int yDim, String search, String mImage
				 */
			} catch (final Exception ex) {
				System.out.println(ex.getMessage());
			}
		}
	}

	/**
	 * Creates and shows a modal open-file dialog.
	 * 
	 * @author scott
	 * 
	 */
	public class OpenFileAction extends AbstractAction {
		/**
		 * Generated by Eclipse
		 */
		private static final long serialVersionUID = -3576454135128663771L;

		JFileChooser chooser;

		/**
		 * The image file chosen to be the source of the Wosaic
		 */
		public File file = null;

		Component parent;

		OpenFileAction(final Component parent, final JFileChooser chooser) {
			super("Open...");
			this.chooser = chooser;
			this.parent = parent;
		}

		/**
		 * Retrieve the file to open
		 * 
		 * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
		 */
		public void actionPerformed(final ActionEvent evt) {
			// Show dialog; this method does not return until dialog is closed
			chooser.showOpenDialog(parent);
			// Get the selected file and put it into our text field.
			file = chooser.getSelectedFile();
			((WosaicUI) parent).FileField.setText(file.getAbsolutePath());
		}
	}

	/**
	 * Generated by Eclipse
	 */
	private static final long serialVersionUID = -7379941758951948236L;;

	static final int TARGET = 200;

	static final int THREADS = 10;

	private JButton BrowseButton = null;

	/**
	 * A reference to a controller-- what actually calls the Flickr service and
	 * JAI processor to do all the work.
	 */
	public Controller controller;

	JFileChooser FileChooser = null;

	private JTextField FileField = null;

	private JLabel FileLabel = null;

	GenerateMosaicAction GenerateAction = null;

	private JButton GenerateButton = null;

	private JLabel ImageBox = null;

	private JPanel jContentPane = null;

	OpenFileAction OpenAction = null;

	private JPanel OptionsPanel = null;

	private JTextField ResolutionField = null;

	private JLabel ResolutionLabel = null;

	private JTextField SearchField = null;

	private JLabel SearchLabel = null;

	/**
	 * This is the default constructor
	 */
	public WosaicUI() {
		super();
		FileChooser = new JFileChooser();
		OpenAction = new OpenFileAction(this, FileChooser);
		GenerateAction = new GenerateMosaicAction(this);
	}

	/**
	 * This method initializes BrowseButton
	 * 
	 * @return javax.swing.JButton
	 */
	private JButton getBrowseButton() {
		if (BrowseButton == null) {
			BrowseButton = new JButton(OpenAction);
			BrowseButton.setText("Browse..");
		}
		return BrowseButton;
	}

	/**
	 * This method initializes FileField
	 * 
	 * @return javax.swing.JTextField
	 */
	private JTextField getFileField() {
		if (FileField == null) {
			FileField = new JTextField(20);
			FileField.setColumns(20);
			FileField.setText("");
		}
		return FileField;
	}

	/**
	 * This method initializes GenerateButton
	 * 
	 * @return javax.swing.JButton
	 */
	private JButton getGenerateButton() {
		if (GenerateButton == null) {
			GenerateButton = new JButton(GenerateAction);
			GenerateButton.setText("Generate Mosaic");
			GenerateButton.setMnemonic(KeyEvent.VK_ENTER);
		}
		return GenerateButton;
	}

	/**
	 * This method initializes jContentPane
	 * 
	 * @return javax.swing.JPanel
	 */
	private JPanel getJContentPane() {
		if (jContentPane == null) {
			ImageBox = new JLabel();
			ImageBox.setText("");
			ImageBox.setHorizontalTextPosition(SwingConstants.CENTER);
			ImageBox.setHorizontalAlignment(SwingConstants.CENTER);
			jContentPane = new JPanel();
			jContentPane.setLayout(new BorderLayout());
			jContentPane.add(getOptionsPanel(), BorderLayout.NORTH);
			jContentPane.add(ImageBox, BorderLayout.CENTER);
		}
		return jContentPane;
	}

	/**
	 * This method initializes OptionsPanel
	 * 
	 * @return javax.swing.JPanel
	 */
	private JPanel getOptionsPanel() {
		if (OptionsPanel == null) {
			final GridBagConstraints gridBagConstraints10 = new GridBagConstraints();
			gridBagConstraints10.gridx = 4;
			gridBagConstraints10.gridheight = 1;
			gridBagConstraints10.gridy = 1;
			final GridBagConstraints gridBagConstraints8 = new GridBagConstraints();
			gridBagConstraints8.fill = GridBagConstraints.HORIZONTAL;
			gridBagConstraints8.gridy = 1;
			gridBagConstraints8.weightx = 1.0;
			gridBagConstraints8.anchor = GridBagConstraints.WEST;
			gridBagConstraints8.gridx = 3;
			final GridBagConstraints gridBagConstraints7 = new GridBagConstraints();
			gridBagConstraints7.gridx = 2;
			gridBagConstraints7.gridy = 1;
			ResolutionLabel = new JLabel();
			ResolutionLabel.setText("Resolution:");
			final GridBagConstraints gridBagConstraints5 = new GridBagConstraints();
			gridBagConstraints5.fill = GridBagConstraints.HORIZONTAL;
			gridBagConstraints5.gridy = 1;
			gridBagConstraints5.weightx = 1.0;
			gridBagConstraints5.anchor = GridBagConstraints.WEST;
			gridBagConstraints5.gridx = 1;
			final GridBagConstraints gridBagConstraints4 = new GridBagConstraints();
			gridBagConstraints4.gridx = 0;
			gridBagConstraints4.anchor = GridBagConstraints.EAST;
			gridBagConstraints4.gridy = 1;
			SearchLabel = new JLabel();
			SearchLabel.setText("Search String:");
			final GridBagConstraints gridBagConstraints3 = new GridBagConstraints();
			gridBagConstraints3.gridx = 4;
			gridBagConstraints3.anchor = GridBagConstraints.WEST;
			gridBagConstraints3.gridy = 0;
			final GridBagConstraints gridBagConstraints2 = new GridBagConstraints();
			gridBagConstraints2.fill = GridBagConstraints.HORIZONTAL;
			gridBagConstraints2.gridy = 0;
			gridBagConstraints2.gridwidth = 3;
			gridBagConstraints2.anchor = GridBagConstraints.WEST;
			gridBagConstraints2.gridx = 1;
			final GridBagConstraints gridBagConstraints = new GridBagConstraints();
			gridBagConstraints.gridx = 0;
			gridBagConstraints.anchor = GridBagConstraints.EAST;
			gridBagConstraints.gridy = 0;
			FileLabel = new JLabel();
			FileLabel.setText("Source Image:");
			OptionsPanel = new JPanel();
			OptionsPanel.setLayout(new GridBagLayout());
			OptionsPanel.setPreferredSize(new Dimension(600, 60));
			OptionsPanel.setBorder(BorderFactory.createCompoundBorder(
					BorderFactory.createBevelBorder(BevelBorder.RAISED),
					BorderFactory.createEmptyBorder(5, 5, 5, 5)));
			OptionsPanel.add(FileLabel, gridBagConstraints);
			OptionsPanel.add(getFileField(), gridBagConstraints2);
			OptionsPanel.add(getBrowseButton(), gridBagConstraints3);
			OptionsPanel.add(SearchLabel, gridBagConstraints4);
			OptionsPanel.add(getSearchField(), gridBagConstraints5);
			OptionsPanel.add(ResolutionLabel, gridBagConstraints7);
			OptionsPanel.add(getResolutionField(), gridBagConstraints8);
			OptionsPanel.add(getGenerateButton(), gridBagConstraints10);
		}
		return OptionsPanel;
	}

	/**
	 * This method initializes ResolutionField
	 * 
	 * @return javax.swing.JTextField
	 */
	private JTextField getResolutionField() {
		if (ResolutionField == null) {
			ResolutionField = new JTextField(5);
			ResolutionField.setColumns(5);
			ResolutionField.setText("25");
		}
		return ResolutionField;
	}

	/**
	 * This method initializes SearchField
	 * 
	 * @return javax.swing.JTextField
	 */
	private JTextField getSearchField() {
		if (SearchField == null) {
			SearchField = new JTextField(10);
			SearchField.setColumns(10);
		}
		return SearchField;
	}

	/**
	 * This method initializes this
	 * 
	 * 
	 */
	@Override
	public void init() {
		this.setSize(600, 400);
		setContentPane(getJContentPane());
	}

}
